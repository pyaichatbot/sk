events {
    worker_connections 1024;
}

http {
    server {
        listen 80;
        server_name localhost;

        # Health check endpoint
        location /health {
            return 200 '{"status": "healthy", "service": "llm-agent", "version": "1.0.0"}';
            add_header Content-Type application/json;
        }

        # Service info endpoint
        location /service-info {
            return 200 '{"service_name": "llm-agent", "port": 8005, "health_endpoint": "/health", "tags": ["llm-agent", "agent", "llm"], "metadata": {"version": "1.0.0", "capabilities": ["llm_processing", "text_generation", "language_understanding"]}}';
            add_header Content-Type application/json;
        }

        # Discovery metrics endpoint
        location /discovery-metrics {
            return 200 '{"service_name": "llm-agent", "registered": true, "health_score": 1.0, "last_health_check": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}';
            add_header Content-Type application/json;
        }

        # Mock agent processing endpoint
        location /process {
            if ($request_method = POST) {
                return 200 '{"content": "Mock LLM response: I have processed your request and generated a comprehensive response.", "success": true, "metadata": {"model": "mock-llm", "tokens_used": 25, "processing_time": 0.5}}';
                add_header Content-Type application/json;
            }
            return 405 '{"error": "Method not allowed"}';
            add_header Content-Type application/json;
        }

        # Default response
        location / {
            return 200 '{"service": "llm-agent", "status": "running", "endpoints": ["/health", "/service-info", "/discovery-metrics", "/process"]}';
            add_header Content-Type application/json;
        }
    }
}
